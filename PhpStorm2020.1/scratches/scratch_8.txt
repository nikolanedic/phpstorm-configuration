<?php

namespace App\Repository;

use App\Models\OrderItem;
use App\Models\Product;
use Carbon\Carbon;
use Illuminate\Support\Collection;

class OrderItemRepository
{
    private $orderItemModel;

    public function __construct(OrderItem $orderItem) {
        var_dump(1);
        $this->orderItemModel = $orderItem;
    }

    public function createOrderItem(Product $product, $orderId)
    {
        $orderItem = new OrderItem();

        $orderItem->order_id = $orderId;
        $orderItem->product_id = $product->id;

        $orderItem->product_data = [
            'name' => $product->name,
            'file' => $product->file,
            'thumb' => $product->thumb,
        ];

        $orderItem->save();

        return $orderItem;
    }

    public function createOrderItems(Collection $products, $orderId)
    {
        $orderItems = [];

        foreach ($products as $product) {
            $orderItem = [];

            $orderItem['order_id'] = $orderId;
            $orderItem['product_id'] = $product->id;

            $orderItem['product_data'] = json_encode([
                'name' => $product->name,
                'file' => $product->file,
                'thumb' => $product->thumb,
            ]);

            $orderItem['created_at'] = Carbon::now();
            $orderItem['updated_at'] = Carbon::now();

            $orderItems[] = $orderItem;
        }

        $this->orderItemModel->insert($orderItems);

        return $this->orderItemModel->select('*')
            ->where('order_id', $orderId)
            ->whereIn('product_id', $products->pluck('id')->toArray())
            ->get();
    }

    public function markProductDownloaded($productId, $userId)
    {
        $orderItem = $this->orderItemModel
            ->select('order_items.*')
            ->join('orders', 'orders.id', '=', 'order_items.order_id')
            ->where('orders.user_id', '=', $userId)
            ->where('order_items.product_id', '=', $productId)
            ->first();

        $orderItem->downloaded_at = Carbon::now();
        $orderItem->save();

        return $orderItem;
    }

    public function isProductDownloaded($productId, $userId)
    {
        return $this->orderItemModel
            ->join('orders', 'orders.id', '=', 'order_items.order_id')
            ->where('orders.user_id', '=', $userId)
            ->where('order_items.product_id', '=', $productId)
            ->whereNotNull('order_items.downloaded_at')
            ->exists();
    }
}
